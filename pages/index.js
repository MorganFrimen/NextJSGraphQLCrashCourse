import { ApolloClient, gql, InMemoryCache } from '@apollo/client';
import Head from 'next/head';
import Image from 'next/image';
import { useState } from 'react';
import styles from '../styles/Home.module.css';
import { API_URL } from '../urls';
import {
  Box,
  Flex,
  Heading,
  SimpleGrid,
  Stack,
  useToast,
  Input,
  IconButton,
} from '@chakra-ui/react';
import { SearchIcon, CloseIcon } from '@chakra-ui/icons';
import Characters from '../components/Characters';

export default function Home(results) {
  const initialState = results;
  const [characters, setCharacters] = useState(initialState.characters);
  const [search, setSearch] = useState('');
  const toast = useToast();

  return (
    <Flex direction="column" justify="center" align="center">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box mb={4} flexDirection="column" align="center" justify="center" py={8}>
        <Heading as="h1" size="2xl" mb={8}>
          Rick and Morty
        </Heading>
        <form
          onSubmit={async (event) => {
            event.preventDefault();
            const results = await fetch('/api/SearchCharacters', {
              method: 'post',
              body: search,
            });
            const { characters, error } = await results.json();
            if (error) {
              toast({
                position: 'bottom',
                title: 'An error occurred.',
                description: error,
                status: 'error',
                duration: 5000,
                isClosable: true,
              });
            } else {
              setCharacters(characters);
            }
          }}>
          <Stack maxWidth="350px" width="100%" isInline mb={8}>
            <Input
              placeholder="Search"
              value={search}
              border="none"
              onChange={(e) => setSearch(e.target.value)}></Input>
            <IconButton
              colorScheme="blue"
              aria-label="Search Database"
              icon={<SearchIcon />}
              disabled={search === ''}
              type="submit"></IconButton>
            <IconButton
              colorScheme="red"
              aria-label="Reset button"
              icon={<CloseIcon />}
              disabled={search === ''}
              onClick={async () => {
                setSearch('');
                setCharacters(initialState.characters);
              }}></IconButton>
          </Stack>
        </form>
        <SimpleGrid columns={[1, 2, 3]} spacing="40px">
          {characters.map((char) => (
            <Characters key={char.id} char={char} />
          ))}
        </SimpleGrid>
      </Box>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer">
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </Flex>
  );
}
export async function getStaticProps() {
  const client = new ApolloClient({
    uri: API_URL,
    cache: new InMemoryCache(),
  });
  const { data } = await client.query({
    query: gql`
      query {
        characters(page: 1) {
          info {
            pages
            count
          }
          results {
            name
            id
            location {
              name
              id
            }
            origin {
              id
              name
            }
            episode {
              episode
              id
              air_date
            }
            image
          }
        }
      }
    `,
  });
  return {
    props: {
      characters: data.characters.results,
    },
  };
}
